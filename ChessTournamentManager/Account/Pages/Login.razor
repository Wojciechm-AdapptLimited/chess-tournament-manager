@page "/login"
@rendermode InteractiveServer

@using System.ComponentModel.DataAnnotations
@using ChessTournamentManager.Core.User
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using ChessTournamentManager.Services
@using Serilog

@inject SignInManager<ApplicationUser> SignInManager
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Log in</PageTitle>

<MudPaper MinHeight="500px" MaxWidth="1000px" Elevation="5" Class="p-5 m-auto d-flex">
    <EditForm Model="@Input" method="post" OnValidSubmit="LoginUser" FormName="login" class="w-50 h-100">
        <DataAnnotationsValidator/>
        <h2>Log in to your account</h2>
        <hr/>
        <div>
            <MudTextField Label="Email" @bind-Value="Input.Email" HelperText="Enter you email address"
                          For="@(() => Input.Email)" InputType="InputType.Email" />
            <MudTextField Label="Password" @bind-Value="Input.Password" HelperText="Enter your password"
                          For="@(() => Input.Password)" InputType="InputType.Password" />
            <MudCheckBox Label="Remember me" @bind-Value="Input.RememberMe" 
                         For="@(() => Input.RememberMe)" Color="Color.Primary" />
        </div>
        <div class="d-flex flex-column mt-4 h-25 justify-content-center align-items-center">
            <MudButton FullWidth="true" ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary">
                Log in
            </MudButton>
            <div class="d-flex flex-row gap-3 my-4">
                <p>
                    <MudLink Color="Color.Primary" Href="/forgot-password" Typo="Typo.caption">Forgot your password?</MudLink>
                </p>
                <p>
                    <MudLink Color="Color.Primary" Href="/resend-email" Typo="Typo.caption">Lost your confirmation email?</MudLink>
                </p>
            </div>
            <p class="h-50">
                You don't have an account yet?
                <MudLink Color="Color.Primary"
                         Href="@NavigationManager.GetUriWithQueryParameters("register", new Dictionary<string, object?> { ["ReturnUrl"] = ReturnUrl })">
                    Register
                </MudLink>
            </p>
        </div>
</EditForm>
<MudPaper Elevation="0" Width="50%" Class="mx-3 d-flex align-items-center">
    <img src="images/35585.jpg" alt="Chess pieces" class="w-100 object-fit-contain"/>
</MudPaper>
</MudPaper>

@code {
    [CascadingParameter] private HttpContext? HttpContext { get; set; }

    [SupplyParameterFromForm] private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery] private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Input = new InputModel();
        
        if (HttpContext is not null && HttpMethods.IsGet(HttpContext.Request.Method))
        {
            // Clear the existing external cookie to ensure a clean login process
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }

    public async Task LoginUser()
    {
        // This doesn't count login failures towards account lockout
        // To enable password failures to trigger account lockout, set lockoutOnFailure: true
        var result = await SignInManager.PasswordSignInAsync(Input.Email, Input.Password, Input.RememberMe, lockoutOnFailure: false);
        
        if (result.Succeeded)
        {
            Log.Information("User logged in.");
            RedirectManager.RedirectTo(ReturnUrl);
        }
    }

    private sealed class InputModel
    {
        [Required (ErrorMessage = "Email is required.")]
        [EmailAddress (ErrorMessage = "Email is not a valid email address.")]
        [Display(Name = "Email")]
        public string Email { get; set; } = string.Empty;

        [Required (ErrorMessage = "Password is required.")]
        [DataType(DataType.Password)]
        [Display(Name = "Password")]
        public string Password { get; set; } = string.Empty;

        [Display(Name = "Remember me?")]
        public bool RememberMe { get; set; }
    }
}
