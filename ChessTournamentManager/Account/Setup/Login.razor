
@*     <EditForm Model="@Input" method="post" OnValidSubmit="LoginUser" FormName="login" class="w-50 h-100"> *@
@*         <StatusMessage Message="@_statusMessage" /> *@
@*         <DataAnnotationsValidator/> *@
@*         <h2>Log in to your account</h2> *@
@*         <hr/> *@
@*         <div class="d-flex flex-column justify-content-around h-100"> *@
@*             <div class="mb-3"> *@
@*                 <MudTextField Label="Email" @bind-Value="Input.Email" HelperText="Enter you email address" *@
@*                               For="@(() => Input.Email)" InputType="InputType.Email"/> *@
@*                 <MudTextField Label="Password" @bind-Value="Input.Password" HelperText="Enter your password" *@
@*                               For="@(() => Input.Password)" InputType="InputType.Password"/> *@
@*                 <MudCheckBox Label="Remember me" @bind-Value="Input.RememberMe" *@
@*                              For="@(() => Input.RememberMe)" Color="Color.Primary"/> *@
@*             </div> *@

@*         </div> *@

@page "/login"
@page "/Account/Login"

@using System.ComponentModel.DataAnnotations
@using ChessTournamentManager.Core.User
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using ChessTournamentManager.Services

@inject SignInManager<ApplicationUser> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Log in</PageTitle>

<MudPaper MinHeight="600px" MaxWidth="1000px" Elevation="5" Class="p-5 m-auto d-flex">
    <EditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="login" class="w-50 h-100 d-flex flex-column justify-content-evenly">
        <DataAnnotationsValidator />
        <StatusMessage Message="@_statusMessage" />
        <div>
            <h2>Log in to your account</h2>
            <hr />
        </div>
        <div class="h-75 d-flex flex-column justify-content-evenly">
            <div class="form-floating mb-3">
                <InputText id="email" @bind-Value="Input.Email" class="form-control" autocomplete="username" aria-required="true" placeholder="name@example.com" />
                <label for="email" class="form-label">Email</label>
                <ValidationMessage For="() => Input.Email" class="text-danger" />
            </div>
            <div class="form-floating mb-3">
                <InputText id="password" type="password" @bind-Value="Input.Password" class="form-control" autocomplete="current-password" aria-required="true" placeholder="password" />
                <label for="password" class="form-label">Password</label>
                <ValidationMessage For="() => Input.Password" class="text-danger" />
            </div>
            <div class="checkbox mb-3">
                <label class="form-label">
                    <InputCheckbox @bind-Value="Input.RememberMe" class="darker-border-checkbox form-check-input" />
                    Remember me
                </label>
            </div>
        </div>
        <div class="d-flex flex-column mt-4 h-50 justify-content-center align-items-center">
            <MudButton FullWidth="true" ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary">
                Log in
            </MudButton>
            <div class="d-flex flex-row gap-3 my-4">
                <p>
                    <MudLink Color="Color.Primary" Href="/forgot-password" Typo="Typo.caption">Forgot your password?</MudLink>
                </p>
                <p>
                    <MudLink Color="Color.Primary" Href="/resend-email" Typo="Typo.caption">Lost your confirmation email?</MudLink>
                </p>
            </div>
            <p class="h-auto">
                You don't have an account yet?
                <MudLink Color="Color.Primary"
                         Href="@NavigationManager.GetUriWithQueryParameters("register", new Dictionary<string, object?> { ["ReturnUrl"] = ReturnUrl })">
                    Register
                </MudLink>
            </p>
        </div>
    </EditForm>
    <MudPaper Elevation="0" Width="50%" Class="mx-3 d-flex align-items-center">
        <img src="images/35585.jpg" alt="Chess pieces" class="w-100 object-fit-contain"/>
    </MudPaper>
</MudPaper>

@code {
    private string? _statusMessage;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            // Clear the existing external cookie to ensure a clean login process
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }

    public async Task LoginUser()
    {
        // This doesn't count login failures towards account lockout
        // To enable password failures to trigger account lockout, set lockoutOnFailure: true
        var result = await SignInManager.PasswordSignInAsync(Input.Email, Input.Password, Input.RememberMe, lockoutOnFailure: false);
        if (result.Succeeded)
        {
            Logger.LogInformation("User logged in.");
            RedirectManager.RedirectTo(ReturnUrl);
        }
        
        _statusMessage = "Error: Invalid login attempt.";
    }

    private sealed class InputModel
    {
        [Required (ErrorMessage = "Email is required.")]
        [EmailAddress (ErrorMessage = "Email is not a valid email address.")]
        [Display(Name = "Email")]
        public string Email { get; set; } = string.Empty;

        [Required (ErrorMessage = "Password is required.")]
        [DataType(DataType.Password)]
        [Display(Name = "Password")]
        public string Password { get; set; } = string.Empty;

        [Display(Name = "Remember me?")]
        public bool RememberMe { get; set; }
    }
}
