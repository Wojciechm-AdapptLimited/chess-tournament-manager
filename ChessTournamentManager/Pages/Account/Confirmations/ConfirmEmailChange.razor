@page "/confirm-email-change"

@using System.Text
@using ChessTournamentManager.Core.User
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using ChessTournamentManager.Services

@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Confirm email change</PageTitle>

<MudPaper MinHeight="400px" MaxWidth="800px" Elevation="5" Class="p-5 m-auto d-flex">
    <MudGrid>
        <MudItem xs="12">
            <MudText Typo="Typo.h4" Class="text-center">Confirm your email change</MudText>
        </MudItem>
        <MudItem xs="12">
            <MudText Typo="Typo.body1" Class="text-center">@_message</MudText>
        </MudItem>
        <MudItem xs="12">
            <MudButton FullWidth="true" Variant="Variant.Filled" Color="Color.Primary" Class="m-auto" Href="/">
                Back to home
            </MudButton>
        </MudItem>
    </MudGrid>
</MudPaper>


@code {
    private string? _message;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromQuery]
    private string? UserId { get; set; }

    [SupplyParameterFromQuery]
    private string? Email { get; set; }

    [SupplyParameterFromQuery]
    private string? Code { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (UserId is null || Email is null || Code is null)
        {
            RedirectManager.RedirectToWithStatus(
                "/login", "Error: Invalid email change confirmation link.", HttpContext);
        }

        var user = await UserManager.FindByIdAsync(UserId);
        
        if (user is null)
        {
            _message = "We experienced an error looking up your account.";
            StateHasChanged();
            return;
        }

        var code = Encoding.UTF8.GetString(WebEncoders.Base64UrlDecode(Code));
        var result = await UserManager.ChangeEmailAsync(user, Email, code);
        
        if (!result.Succeeded)
        {
            _message = "We experienced an error changing your email.";
            StateHasChanged();
            return;
        }

        // In our UI email and user name are one and the same, so when we update the email
        // we need to update the user name.
        var setUserNameResult = await UserManager.SetUserNameAsync(user, Email);
        if (!setUserNameResult.Succeeded)
        {
            _message = "We experienced an error changing your user name.";
            StateHasChanged();
            return;
        }

        await SignInManager.RefreshSignInAsync(user);
        _message = "Thank you for confirming your email change.";
        StateHasChanged();
    }
}
