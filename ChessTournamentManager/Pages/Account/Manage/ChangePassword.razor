@page "/account/security"


@using System.ComponentModel.DataAnnotations
@using ChessTournamentManager.Core.User
@using Microsoft.AspNetCore.Identity
@using ChessTournamentManager.Services

@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager
@inject IdentityUserAccessor UserAccessor
@inject IdentityRedirectManager RedirectManager
@inject ILogger<ChangePassword> Logger

<PageTitle>Change password</PageTitle>

<MudPaper MinHeight="400px" MaxWidth="1000px" Elevation="5" Class="p-5 m-auto d-flex">
    <EditForm Model="Input" FormName="change-password" OnValidSubmit="OnValidSubmitAsync" method="post">
        <DataAnnotationsValidator />
        <StatusMessage Message="@_message" />
        
        <h3>Change password</h3>
        <hr/>
        
        <div class="form-floating mb-3">
            <InputText id="old-password" type="password" @bind-Value="Input.OldPassword" class="form-control" autocomplete="current-password" aria-required="true" placeholder="Please enter your old password." />
            <label for="old-password" class="form-label">Old password</label>
            <ValidationMessage For="() => Input.OldPassword" class="text-danger" />
        </div>
        <div class="form-floating mb-3">
            <InputText id="new-password" type="password" @bind-Value="Input.NewPassword" class="form-control" autocomplete="new-password" aria-required="true" placeholder="Please enter your new password." />
            <label for="new-password" class="form-label">New password</label>
            <ValidationMessage For="() => Input.NewPassword" class="text-danger" />
        </div>
        <div class="form-floating mb-3">
            <InputText id="confirm-password" type="password" @bind-Value="Input.ConfirmPassword" class="form-control" autocomplete="new-password" aria-required="true" placeholder="Please confirm your new password." />
            <label for="confirm-password" class="form-label">Confirm password</label>
            <ValidationMessage For="() => Input.ConfirmPassword" class="text-danger" />
        </div>
        <MudButton FullWidth="true" ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="mt-4">
            Update Password
        </MudButton>
    </EditForm>
</MudPaper>
@code {
    private string? _message;
    private ApplicationUser _user = default!;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        _user = await UserAccessor.GetRequiredUserAsync(HttpContext);
    }

    private async Task OnValidSubmitAsync()
    {
        var changePasswordResult = await UserManager.ChangePasswordAsync(_user, Input.OldPassword, Input.NewPassword);
        if (!changePasswordResult.Succeeded)
        {
            _message = $"Error: {string.Join(",", changePasswordResult.Errors.Select(error => error.Description))}";
            return;
        }

        await SignInManager.RefreshSignInAsync(_user);
        Logger.LogInformation("User changed their password successfully.");

        RedirectManager.RedirectToCurrentPageWithStatus("Your password has been changed", HttpContext);
    }

    private sealed class InputModel
    {
        [Required (ErrorMessage = "You must enter your current password")]
        [DataType(DataType.Password)]
        [Display(Name = "Current password")]
        public string OldPassword { get; set; } = "";

        [Required(ErrorMessage = "Password is required")]
        [RegularExpression(@"^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#\$%\^&\*\-_]).{8,64}$",
            ErrorMessage = "Password is not valid, it must be between 8 - 64 characters and contain a number, a capital letter, and a special character")]
        [DataType(DataType.Password)]
        [Display(Name = "Password")]
        public string NewPassword { get; set; } = "";
        
        [Required(ErrorMessage = "You must confirm your password")]
        [Compare("Password", ErrorMessage = "The password and confirmation password do not match.")]
        [DataType(DataType.Password)]
        [Display(Name = "Confirm password")]
        public string ConfirmPassword { get; set; } = "";
    }
}
