@page "/account/profile"

@using System.ComponentModel.DataAnnotations
@using ChessTournamentManager.Core.User
@using Microsoft.AspNetCore.Identity
@using ChessTournamentManager.Services

@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager
@inject IdentityUserAccessor UserAccessor
@inject IdentityRedirectManager RedirectManager

<PageTitle>Profile</PageTitle>

<h3>Profile</h3>
<StatusMessage />

<div class="row">
    <div class="col-md-6">
        <EditForm Model="Input" FormName="profile" OnValidSubmit="OnValidSubmitAsync" method="post">
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert" />
            <div class="form-floating mb-3">
                <InputText id="first-name" @bind-Value="Input.FirstName" class="form-control" placeholder="Enter your first name..." />
                <label for="first-name" class="form-label">First Name</label>
                <ValidationMessage For="() => Input.FirstName" class="text-danger" />
            </div>
            <div class="form-floating mb-3">
                <InputText id="last-name" @bind-Value="Input.LastName" class="form-control" placeholder="Enter your last name..." />
                <label for="last-name" class="form-label">Last Name</label>
                <ValidationMessage For="() => Input.LastName" class="text-danger" />
            </div>
            <button type="submit" class="w-100 btn btn-lg btn-primary">Save</button>
        </EditForm>
    </div>
</div>

@code {
    private ApplicationUser _user = default!;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        _user = await UserAccessor.GetRequiredUserAsync(HttpContext);
        
        Input.FirstName ??= _user.FirstName;
        Input.LastName ??= _user.LastName;
    }

    private async Task OnValidSubmitAsync()
    {
        if (!string.IsNullOrEmpty(Input.FirstName) && Input.FirstName != _user.FirstName)
        {
            _user.FirstName = Input.FirstName;
        }
        
        if (!string.IsNullOrEmpty(Input.LastName) && Input.LastName != _user.LastName)
        {
            _user.LastName = Input.LastName;
        }
        
        await UserManager.UpdateAsync(_user);
        await SignInManager.RefreshSignInAsync(_user);
        RedirectManager.RedirectToCurrentPageWithStatus("Your profile has been updated", HttpContext);
    }

    private sealed class InputModel
    {
        [Required]
        [DataType(DataType.Text)]
        [Display(Name = "First name")]
        public string? FirstName { get; set; }
        
        [Required]
        [DataType(DataType.Text)]
        [Display(Name = "Last name")]
        public string? LastName { get; set; }
    }
}
