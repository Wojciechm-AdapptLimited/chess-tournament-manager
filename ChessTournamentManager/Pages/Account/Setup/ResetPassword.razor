@page "/Account/ResetPassword"

@using System.ComponentModel.DataAnnotations
@using System.Text
@using ChessTournamentManager.Core.User
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using ChessTournamentManager.Services

@inject IdentityRedirectManager RedirectManager
@inject UserManager<ApplicationUser> UserManager

<PageTitle>Reset password</PageTitle>

<MudPaper MinHeight="500px" MaxWidth="1000px" Elevation="5" Class="p-5 m-auto d-flex">
    @if (!_completed)
    {
        <EditForm Model="Input" FormName="reset-password" OnValidSubmit="OnValidSubmitAsync" method="post">
            <DataAnnotationsValidator/>
            <StatusMessage Message="@_statusMessage"/>

            <h2>Reset your password.</h2>
            <hr/>
            <input type="hidden" name="Input.Code" value="@Input.Code"/>
            <div class="mb-3">
                <MudTextField Label="Email" @bind-Value="Input.Email" HelperText="Enter your email address"
                              For="@(() => Input.Email)" InputType="InputType.Email"/>
                <MudTextField Label="Password" @bind-Value="Input.Password" HelperText="Choose a strong password"
                              For="@(() => Input.Password)" InputType="InputType.Password"/>
                <MudTextField Label="Confirm Password" @bind-Value="Input.ConfirmPassword" HelperText="Confirm your password"
                              For="@(() => Input.ConfirmPassword)" InputType="InputType.Password"/>
            </div>
             <MudButton Size="Size.Large" FullWidth="true" ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary">
                 Reset password
            </MudButton>
        </EditForm>
    }
    else
    {
        <div class="h-100 d-flex flex-column justify-content-center text-center">
            <h2>Password reset successfully </h2>
            <hr/>
            <MudButton FullWidth="true" Variant="Variant.Filled" Color="Color.Primary" Class="m-auto" Href="/login">
                Go to login
            </MudButton>
        </div>
    }
</MudPaper>

@code {
    private bool _completed;
    private string? _statusMessage;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? Code { get; set; }

    protected override void OnInitialized()
    {
        if (Code is null)
        {
            RedirectManager.RedirectTo("");
        }

        Input.Code = Encoding.UTF8.GetString(WebEncoders.Base64UrlDecode(Code));
    }

    private async Task OnValidSubmitAsync()
    {
        var user = await UserManager.FindByEmailAsync(Input.Email);
        if (user is null)
        {
            _completed = true;
            StateHasChanged();
            return;
        }

        var result = await UserManager.ResetPasswordAsync(user, Input.Code, Input.Password);
        
        if (result.Succeeded)
        {
            _completed = true;
            StateHasChanged();
            return;
        }
        
        _statusMessage = "We couldn't reset your password. Please try again.";
    }

    private sealed class InputModel
    {
        [Required(ErrorMessage = "Email is required")]
        [EmailAddress(ErrorMessage = "Not a valid email address")]
        [Display(Name = "Email")]
        public string Email { get; set; } = "";

        [Required(ErrorMessage = "Password is required")]
        [RegularExpression(@"^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#\$%\^&\*\-_]).{8,64}$",
            ErrorMessage = "Password is not valid, it must be between 8 - 64 characters and contain a number, a capital letter, and a special character")]
        [DataType(DataType.Password)]
        [Display(Name = "Password")]
        public string Password { get; set; } = "";
        
        [Required(ErrorMessage = "You must confirm your password")]
        [Compare("Password", ErrorMessage = "The password and confirmation password do not match.")]
        [DataType(DataType.Password)]
        [Display(Name = "Confirm password")]
        public string ConfirmPassword { get; set; } = "";

        [Required]
        public string Code { get; set; } = "";
    }
}
